name: � Lighthouse Performance Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # 毎日 JST 9:00 (UTC 0:00) に実行
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  lighthouse-check:
    name: 🔍 Lighthouse CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Lighthouseは@lhci/cliに含まれているため、個別インストール不要

    - name: Start development server
      run: |
        npm run dev &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # サーバーが起動するまで最大60秒待機
        echo "Waiting for server to start..."
        for i in {1..12}; do
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            break
          fi
          echo "Attempt $i/12: Server not ready, waiting 5 seconds..."
          sleep 5
        done
        
        # 最終確認
        if ! curl -f http://localhost:8080 > /dev/null 2>&1; then
          echo "❌ Server failed to start"
          exit 1
        fi

    - name: Run Lighthouse CI
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      run: npx lhci autorun

    - name: Stop development server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-results
        path: |
          .lighthouseci/
          lighthouse-results/

  lighthouse-desktop:
    name: 🖥️ Lighthouse Desktop
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start development server
      run: |
        npm run dev &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # サーバー起動を待機
        for i in {1..12}; do
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            break
          fi
          echo "Attempt $i/12: Server not ready, waiting 5 seconds..."
          sleep 5
        done

    - name: Run Lighthouse (Desktop)
      run: |
        npx lighthouse http://localhost:8080 \
          --preset=desktop \
          --output=json,html \
          --output-path=./lighthouse-desktop \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --quiet

    - name: Parse Lighthouse scores
      run: |
        echo "## 📊 Lighthouse Desktop Scores" >> $GITHUB_STEP_SUMMARY
        echo "| Category | Score |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # JSONファイルからスコアを抽出（null値に対応）
        performance=$(jq -r '.categories.performance.score // 0 | . * 100 | floor' lighthouse-desktop.report.json)
        accessibility=$(jq -r '.categories.accessibility.score // 0 | . * 100 | floor' lighthouse-desktop.report.json)
        best_practices=$(jq -r '.categories["best-practices"].score // 0 | . * 100 | floor' lighthouse-desktop.report.json)
        seo=$(jq -r '.categories.seo.score // 0 | . * 100 | floor' lighthouse-desktop.report.json)
        pwa=$(jq -r '.categories.pwa.score // 0 | . * 100 | floor' lighthouse-desktop.report.json)
        
        echo "| Performance | ${performance}% |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${accessibility}% |" >> $GITHUB_STEP_SUMMARY
        echo "| Best Practices | ${best_practices}% |" >> $GITHUB_STEP_SUMMARY
        echo "| SEO | ${seo}% |" >> $GITHUB_STEP_SUMMARY
        echo "| PWA | ${pwa}% |" >> $GITHUB_STEP_SUMMARY

    - name: Stop development server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

    - name: Upload Desktop results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-desktop-results
        path: lighthouse-desktop.*

  lighthouse-mobile:
    name: 📱 Lighthouse Mobile
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start development server
      run: |
        npm run dev &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # サーバー起動を待機
        for i in {1..12}; do
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            break
          fi
          echo "Attempt $i/12: Server not ready, waiting 5 seconds..."
          sleep 5
        done

    - name: Run Lighthouse (Mobile)
      run: |
        npx lighthouse http://localhost:8080 \
          --preset=perf \
          --output=json,html \
          --output-path=./lighthouse-mobile \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --quiet

    - name: Parse Mobile scores
      run: |
        echo "## 📱 Lighthouse Mobile Scores" >> $GITHUB_STEP_SUMMARY
        echo "| Category | Score |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        
        performance=$(jq -r '.categories.performance.score // 0 | . * 100 | floor' lighthouse-mobile.report.json)
        accessibility=$(jq -r '.categories.accessibility.score // 0 | . * 100 | floor' lighthouse-mobile.report.json)
        best_practices=$(jq -r '.categories["best-practices"].score // 0 | . * 100 | floor' lighthouse-mobile.report.json)
        seo=$(jq -r '.categories.seo.score // 0 | . * 100 | floor' lighthouse-mobile.report.json)
        pwa=$(jq -r '.categories.pwa.score // 0 | . * 100 | floor' lighthouse-mobile.report.json)
        
        echo "| Performance | ${performance}% |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${accessibility}% |" >> $GITHUB_STEP_SUMMARY
        echo "| Best Practices | ${best_practices}% |" >> $GITHUB_STEP_SUMMARY
        echo "| SEO | ${seo}% |" >> $GITHUB_STEP_SUMMARY
        echo "| PWA | ${pwa}% |" >> $GITHUB_STEP_SUMMARY

    - name: Stop development server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

    - name: Upload Mobile results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-mobile-results
        path: lighthouse-mobile.*

  performance-monitoring:
    name: 📈 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [lighthouse-check, lighthouse-desktop, lighthouse-mobile]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate performance report
      run: |
        echo "# 📊 Performance Monitoring Report" > performance-report.md
        echo "" >> performance-report.md
        echo "**実行日時**: $(date)" >> performance-report.md
        echo "**ブランチ**: ${{ github.ref }}" >> performance-report.md
        echo "**コミット**: ${{ github.sha }}" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## 🎯 Performance Thresholds" >> performance-report.md
        echo "- **Performance**: 80% 以上" >> performance-report.md
        echo "- **Accessibility**: 90% 以上" >> performance-report.md
        echo "- **Best Practices**: 90% 以上" >> performance-report.md
        echo "- **SEO**: 80% 以上" >> performance-report.md
        echo "- **PWA**: 50% 以上" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## 📱 Test Results" >> performance-report.md
        echo "詳細な結果は各ジョブのArtifactsを確認してください。" >> performance-report.md

    - name: Create issue on performance regression
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## パフォーマンス低下が検出されました
          
          **実行日時**: ${new Date().toISOString()}
          **ブランチ**: ${{ github.ref }}
          **コミット**: ${{ github.sha }}
          
          ### 確認事項
          - [ ] Lighthouseスコアの詳細確認
          - [ ] パフォーマンス低下の原因特定
          - [ ] 必要に応じて修正実施
          
          ### スコア閾値
          - Performance: 80%以上
          - Accessibility: 90%以上
          - Best Practices: 90%以上
          - SEO: 80%以上
          - PWA: 50%以上
          
          ### 詳細
          [Actions実行結果](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *このissueは自動生成されました*
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['performance', 'regression', 'automated']
          });
